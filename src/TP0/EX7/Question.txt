7.2) Quel inconv´enient poss`ede cette architecture ? Imaginez qu’on ajoute un autre composant
sonore, puis un autre, etc.

>>Cette architecture ne suit pas les principes SOLID :1- le principe de responsabilité
unique 2- le principe d'inversion des dépendances. Chaque composant dépend directement de la méthode alerter() pour
envoyer une alerte, ce qui rend le code plus difficile à maintenir et à faire évoluer.

  Si on ajoute autre composant sonore, nous devrons chaque fois :

  -Refaire la logique de l'envoi des SMS.
  -Établir une nouvelle connexion avec  un PackageSMS, augmentant la complexité des relations entre les classes.
  Cela entraînerait une duplication de code et augmenterait le couplage entre les classes et le package SMS, ce qui rend le système
  rigide face aux changements futurs.